[{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to readwritesqlite","title":"Contributing to readwritesqlite","text":"outlines propose change readwritesqlite.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to readwritesqlite","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to readwritesqlite","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to readwritesqlite","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Begin commit merge messages - indicate user facing changes included NEWS.md. use fledge automatically generate NEWS.md file.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to readwritesqlite","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to readwritesqlite","text":"Please note readwritesqlite project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Poisson Consulting Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with readwritesqlite","title":"Getting help with readwritesqlite","text":"Thanks using readwritesqlite! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/SUPPORT.html","id":"make-sure-its-new","dir":"","previous_headings":"","what":"Make sure its new","title":"Getting help with readwritesqlite","text":"opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with readwritesqlite","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"starting","dir":"Articles","previous_headings":"","what":"Starting","title":"Using readwritesqlite","text":"first task loading readwritesqlite create object class SQLiteConnection. create one memory although general user want specify path.","code":"library(readwritesqlite) conn <- rws_connect(\":memory:\")"},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"writing-data","dir":"Articles","previous_headings":"","what":"Writing Data","title":"Using readwritesqlite","text":"Individual data frames, environments named lists data frames can written connection using rws_write(). case data frame default table name name object (alternative name can specified using x_name argument). fact rws_write() accepts environments means user can easily write data frames current environment SQLiteConnection. Objects data frames silently filtered environments cause error lists.","code":"rws_write(rws_data, exists = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"rws_data\" a_table <- rws_data[c(\"date\", \"logical\")] another_table <- rws_data[c(\"factor\", \"ordered\")] not_a_table <- 1 rws_write(environment(), exists = FALSE, all = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"a_table\"       \"another_table\" \"rws_data\""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"exists","dir":"Articles","previous_headings":"Writing Data","what":"Exists","title":"Using readwritesqlite","text":"default exists argument rws_write() function TRUE. means existing tables (presumably created database designer appropriate checks foreign keys) can written . user wishes automatically create new tables (don’t exist) writing set exists = NA. user wishes write previously non-existent tables set exists = FALSE.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"foreign-keys","dir":"Articles","previous_headings":"Writing Data","what":"Foreign Keys","title":"Using readwritesqlite","text":"rws_write() function ensures writing new data frame(s) database violate foreign keys. data database left unchanged.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"committing-data","dir":"Articles","previous_headings":"Writing Data","what":"Committing Data","title":"Using readwritesqlite","text":"default, check key violations occur data frame(s) written database. Otherwise error message issued changes rolled back. user wishes simply check whether data written database without actually making changes can call rws_write() commit = FALSE.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"deleting-data-and-meta-data","dir":"Articles","previous_headings":"Writing Data","what":"Deleting Data (and Meta Data)","title":"Using readwritesqlite","text":"Meta data recorded user uses rws_write() write data frame empty table. order change add meta data user read existing data table (using rws_read_sqlite()), modify accordingly re-write using rws_write() delete = TRUE. exception factors ordered factors. existing factor levels already recorded meta data user can pass data additional rearranged levels factor additional levels ordered factors without deleting existing data.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"replacing-data","dir":"Articles","previous_headings":"Writing Data","what":"Replacing Data","title":"Using readwritesqlite","text":"writing data violates unique primary key error message returned table unaltered. exception replace = TRUE case existing rows cause unique primary key violations removed.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"duplicate-data","dir":"Articles","previous_headings":"Writing Data","what":"Duplicate Data","title":"Using readwritesqlite","text":"passing data frames rws_write() form environment named list, table must represented just one data frame unique = TRUE (default). Duplicates also permitted delete = TRUE (first data written overwritten) exists = FALSE (table exist duplicate written).","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"all-data","dir":"Articles","previous_headings":"Writing Data","what":"All Data","title":"Using readwritesqlite","text":"passing data frames rws_write() form environment named list, = TRUE (default) exists FALSE existing tables must represented least . option useful checking tables data frame populated transferring data old new database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"strict","dir":"Articles","previous_headings":"Writing Data","what":"Strict","title":"Using readwritesqlite","text":"default strict = TRUE extra columns input data frame cause error thrown. strict = FALSE error replaced warning additional columns automatically removed data. writing environments list data exists = TRUE, strict argument also determines extra data frames cause informative error automatically removed warning.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"silent","dir":"Articles","previous_headings":"Writing Data","what":"Silent","title":"Using readwritesqlite","text":"user wishes suppress package specific messages warnings set silent = TRUE. default value silent = getOption(\"rws.silent\", FALSE) user can silence package session-wide options(silent = TRUE).","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading Data","title":"Using readwritesqlite","text":"Data can read using rws_read() either takes vector table names connection first argument. rws_read() returns named list tibbles. connection first argument named list consists tables data base. table names can course manipulated list2env() used assign data frames current environment. user wishes read single data frame can use rws_read_table() rws_read_meta() rws_read_log() allow user read meta log tables.","code":"tables <- rws_read(conn) names(tables) #> [1] \"a_table\"       \"another_table\" \"rws_data\" tables$rws_data #> # A tibble: 3 × 6 #>   logical date       factor ordered posixct             units #>   <lgl>   <date>     <fct>  <ord>   <dttm>                [m] #> 1 TRUE    2000-01-01 x      x       2001-01-02 03:04:05  10   #> 2 FALSE   2001-02-03 y      y       2006-07-08 09:10:11  11.5 #> 3 NA      NA         NA     NA      NA                   NA names(tables) <- toupper(names(tables)) list2env(tables, environment()) rws_read_table(\"rws_data\", conn = conn) #> # A tibble: 3 × 6 #>   logical date       factor ordered posixct             units #>   <lgl>   <date>     <fct>  <ord>   <dttm>                [m] #> 1 TRUE    2000-01-01 x      x       2001-01-02 03:04:05  10   #> 2 FALSE   2001-02-03 y      y       2006-07-08 09:10:11  11.5 #> 3 NA      NA         NA     NA      NA                   NA rws_read_meta(conn) #> # A tibble: 10 × 4 #>    TableMeta     ColumnMeta MetaMeta          DescriptionMeta #>    <chr>         <chr>      <chr>             <chr>           #>  1 A_TABLE       DATE       class: Date       NA              #>  2 A_TABLE       LOGICAL    class: logical    NA              #>  3 ANOTHER_TABLE FACTOR     factor: 'x', 'y'  NA              #>  4 ANOTHER_TABLE ORDERED    ordered: 'y', 'x' NA              #>  5 RWS_DATA      DATE       class: Date       NA              #>  6 RWS_DATA      FACTOR     factor: 'x', 'y'  NA              #>  7 RWS_DATA      LOGICAL    class: logical    NA              #>  8 RWS_DATA      ORDERED    ordered: 'y', 'x' NA              #>  9 RWS_DATA      POSIXCT    tz: Etc/GMT+8     NA              #> 10 RWS_DATA      UNITS      units: m          NA rws_read_log(conn) #> # A tibble: 6 x 5 #>   DateTimeUTCLog      UserLog TableLog      CommandLog NRowLog #>   <dttm>              <chr>   <chr>         <chr>        <int> #> 1 2019-07-07 16:09:59 joe     RWS_DATA      CREATE           0 #> 2 2019-07-07 16:10:00 joe     RWS_DATA      INSERT           3 #> 3 2019-07-07 16:10:00 joe     A_TABLE       CREATE           0 #> 4 2019-07-07 16:10:00 joe     A_TABLE       INSERT           3 #> 5 2019-07-07 16:10:00 joe     ANOTHER_TABLE CREATE           0 #> 6 2019-07-07 16:10:00 joe     ANOTHER_TABLE INSERT           3"},{"path":"https://poissonconsulting.github.io/readwritesqlite/articles/using-readwritesqlite.html","id":"cleaning-up","dir":"Articles","previous_headings":"","what":"Cleaning Up","title":"Using readwritesqlite","text":"’s good practice close connection finished .","code":"rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Thorley. Author, maintainer. Sebastian Dalgarno. Contributor. Poisson Consulting. Copyright holder, funder.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorley J (2024). readwritesqlite: Enhanced Reading Writing 'SQLite' Databases. R package version 0.2.0.9005, https://poissonconsulting.github.io/readwritesqlite/, https://github.com/poissonconsulting/readwritesqlite.","code":"@Manual{,   title = {readwritesqlite: Enhanced Reading and Writing for 'SQLite' Databases},   author = {Joe Thorley},   year = {2024},   note = {R package version 0.2.0.9005, https://poissonconsulting.github.io/readwritesqlite/},   url = {https://github.com/poissonconsulting/readwritesqlite}, }"},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/index.html","id":"readwritesqlite","dir":"","previous_headings":"","what":"readwritesqlite","title":"Enhanced Reading and Writing for SQLite Databases","text":"SQLite databases simple, powerful way validate, query store related data frames particularly used RSQLite package. However, current solutions preserve (check) meta data, log changes provide particularly useful error messages. readwritesqlite R package default class logical, Date hms columns levels factors ordered factors time zone POSIXct columns units unit columns projection sfc columns sf column sf objects date time system user table creation data insertion deletion columns missing NULL columns contain missing values PRIMARY KEY column values input data unique readwritesqlite also allows user write environments (named lists) data frames (useful populating databases) delete existing data (meta data) writing (useful converting existing database) replace existing data causes unique primary key conflicts (useful updating databases) confirm data can written without committing changes (useful checking data) check existing tables written (useful data transfers) rearrange add levels factors add levels ordered factors initialize meta data new table writing data frame sf data frame rows logical, Date, factor, ordered, POSIXct, sfc unit columns (useful creating empty database additional informative checks) readwritesqlite provides features rws_write() rws_read() functions. rws_query() function allows user pass SQL query. default, metadata (except setting sf column) , unambiguously defined, preserved column final query. enable functionality user ensure ) columns tables referenced query different names identical metadata b) column names final query match referenced base tables. init, meta log data stored separate tables main data means interfere ways interacting SQLite database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Enhanced Reading and Writing for SQLite Databases","text":"install latest release CRAN install developmental version GitHub","code":"install.packages(\"readwritesqlite\") # install.packages(\"remotes\") remotes::install_github(\"poissonconsulting/readwritesqlite\")"},{"path":"https://poissonconsulting.github.io/readwritesqlite/index.html","id":"demonstration","dir":"","previous_headings":"","what":"Demonstration","title":"Enhanced Reading and Writing for SQLite Databases","text":"Key attribute information preserved many classes. attribute information stored metadata table user can add descriptions wish. log provides record data changes made using readwritesqlite. Don’t forget disconnect done.","code":"library(readwritesqlite)  # for nicer printing of data frames library(tibble) library(sf) #> Linking to GEOS 3.12.2, GDAL 3.9.1, PROJ 9.4.1; sf_use_s2() is TRUE  conn <- rws_connect()  rws_data <- readwritesqlite::rws_data rws_data #> # A tibble: 3 × 6 #>   logical date       factor ordered posixct             units #>   <lgl>   <date>     <fct>  <ord>   <dttm>                [m] #> 1 TRUE    2000-01-01 x      x       2001-01-02 03:04:05  10   #> 2 FALSE   2001-02-03 y      y       2006-07-08 09:10:11  11.5 #> 3 NA      NA         <NA>   <NA>    NA                   NA  rws_write(rws_data, exists = FALSE, conn = conn)  rws_read_table(\"rws_data\", conn = conn) #> # A tibble: 3 × 6 #>   logical date       factor ordered posixct             units #>   <lgl>   <date>     <fct>  <ord>   <dttm>                [m] #> 1 TRUE    2000-01-01 x      x       2001-01-02 03:04:05  10   #> 2 FALSE   2001-02-03 y      y       2006-07-08 09:10:11  11.5 #> 3 NA      NA         <NA>   <NA>    NA                   NA rws_read_meta(conn = conn) #> # A tibble: 6 × 4 #>   TableMeta ColumnMeta MetaMeta          DescriptionMeta #>   <chr>     <chr>      <chr>             <chr>           #> 1 RWS_DATA  DATE       class: Date       <NA>            #> 2 RWS_DATA  FACTOR     factor: 'x', 'y'  <NA>            #> 3 RWS_DATA  LOGICAL    class: logical    <NA>            #> 4 RWS_DATA  ORDERED    ordered: 'y', 'x' <NA>            #> 5 RWS_DATA  POSIXCT    tz: Etc/GMT+8     <NA>            #> 6 RWS_DATA  UNITS      units: m          <NA> rws_describe_meta(\"rws_data\", \"posixct\", \"The time of a visit\", conn = conn) rws_describe_meta(\"rws_data\", \"units\", \"The site length.\", conn = conn) rws_read_meta(conn = conn) #> # A tibble: 6 × 4 #>   TableMeta ColumnMeta MetaMeta          DescriptionMeta     #>   <chr>     <chr>      <chr>             <chr>               #> 1 RWS_DATA  DATE       class: Date       <NA>                #> 2 RWS_DATA  FACTOR     factor: 'x', 'y'  <NA>                #> 3 RWS_DATA  LOGICAL    class: logical    <NA>                #> 4 RWS_DATA  ORDERED    ordered: 'y', 'x' <NA>                #> 5 RWS_DATA  POSIXCT    tz: Etc/GMT+8     The time of a visit #> 6 RWS_DATA  UNITS      units: m          The site length. rws_read_log(conn = conn) #> # A tibble: 2 x 5 #>   DateTimeUTCLog      UserLog TableLog CommandLog NRowLog #>   <dttm>              <chr>   <chr>    <chr>        <int> #> 1 2019-07-07 16:05:10 joe     RWS_DATA CREATE           0 #> 2 2019-07-07 16:05:11 joe     RWS_DATA INSERT           3 rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Enhanced Reading and Writing for SQLite Databases","text":"information using readwritesqlite see vignette using-readwritesqlite.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Enhanced Reading and Writing for SQLite Databases","text":"Please report issues. Pull requests always welcome.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Enhanced Reading and Writing for SQLite Databases","text":"Please note readwritesqlite project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/pull-request.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"NA","text":"Describe changes detail","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/pull-request.html","id":"related-issue","dir":"","previous_headings":"","what":"Related Issue","title":"NA","text":"pull request closes issue please include example “fix #4” just relates issue simply include example “#4”.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/chk_sqlite_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"Check SQLite Connection — chk_sqlite_conn","title":"Check SQLite Connection — chk_sqlite_conn","text":"chk_sqlite_conn checks SQLite connection.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/chk_sqlite_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check SQLite Connection — chk_sqlite_conn","text":"","code":"chk_sqlite_conn(x, connected = NA, x_name = NULL)  check_sqlite_connection(   x,   connected = NA,   x_name = substitute(x),   error = TRUE )"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/chk_sqlite_conn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check SQLite Connection — chk_sqlite_conn","text":"x object check. connected logical scalar specifying whether x connected. x_name string name object x NULL. error flag specifying whether error check fails.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/chk_sqlite_conn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check SQLite Connection — chk_sqlite_conn","text":"NULL, invisibly. Called side effect throwing error condition met.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/chk_sqlite_conn.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Check SQLite Connection — chk_sqlite_conn","text":"check_sqlite_connection(): Check SQLite Connection","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/chk_sqlite_conn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check SQLite Connection — chk_sqlite_conn","text":"","code":"conn <- rws_connect() chk_sqlite_conn(conn) rws_disconnect(conn) try(chk_sqlite_conn(conn, connected = TRUE)) #> Error in eval(expr, envir) : `conn` must be connected."},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/readwritesqlite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"readwritesqlite: Enhanced Reading and Writing for 'SQLite' Databases — readwritesqlite-package","title":"readwritesqlite: Enhanced Reading and Writing for 'SQLite' Databases — readwritesqlite-package","text":"Reads writes data frames 'SQLite' databases preserving time zones (POSIXct columns), projections ('sfc' columns), units ('units' columns), levels (factors ordered factors) classes logical, Date 'hms' columns. also logs changes tables provides informative error messages.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/readwritesqlite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"readwritesqlite: Enhanced Reading and Writing for 'SQLite' Databases — readwritesqlite-package","text":"Maintainer: Joe Thorley joe@poissonconsulting.ca (ORCID) contributors: Sebastian Dalgarno seb@poissonconsulting.ca (ORCID) [contributor] Poisson Consulting [copyright holder, funder]","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Opens SQLite Database Connection — rws_connect","title":"Opens SQLite Database Connection — rws_connect","text":"Opens RSQLite::SQLiteConnection SQLite database foreign key constraints enabled.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opens SQLite Database Connection — rws_connect","text":"","code":"rws_connect(dbname = \":memory:\", exists = NA)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Opens SQLite Database Connection — rws_connect","text":"dbname path database file. SQLite keeps database instance one single file. name database file name, thus database names legal file names running platform. two exceptions: \"\" create temporary -disk database. file deleted connection closed. \":memory:\" \"file::memory:\" create temporary -memory database. exists flag specifying whether table(s) must already exist.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Opens SQLite Database Connection — rws_connect","text":"RSQLite::SQLiteConnection SQLite database foreign key constraints enabled.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Opens SQLite Database Connection — rws_connect","text":"","code":"conn <- rws_connect() print(conn) #> <SQLiteConnection> #>   Path: :memory: #>   Extensions: TRUE rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data — rws_data","title":"Example Data — rws_data","text":"sf tibble example data.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data — rws_data","text":"","code":"rws_data"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Data — rws_data","text":"object class tbl_df (inherits tbl, data.frame) 3 rows 6 columns.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Data — rws_data","text":"","code":"rws_data #> # A tibble: 3 × 6 #>   logical date       factor ordered posixct             units #>   <lgl>   <date>     <fct>  <ord>   <dttm>                [m] #> 1 TRUE    2000-01-01 x      x       2001-01-02 03:04:05  10   #> 2 FALSE   2001-02-03 y      y       2006-07-08 09:10:11  11.5 #> 3 NA      NA         NA     NA      NA                   NA"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Descriptions to SQL Meta Data Table — rws_describe_meta.character","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta.character","text":"Add Descriptions SQL Meta Data Table","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta.character","text":"","code":"# S3 method for class 'character' rws_describe_meta(x, column, description, ..., conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta.character","text":"x character vector table name(s). column character vector column name(s). description character vector description(s) ... used. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta.character","text":"invisible copy updated meta table.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta.character","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_read_meta(conn) #> # A tibble: 6 × 4 #>   TableMeta ColumnMeta MetaMeta          DescriptionMeta #>   <chr>     <chr>      <chr>             <chr>           #> 1 RWS_DATA  DATE       class: Date       NA              #> 2 RWS_DATA  FACTOR     factor: 'x', 'y'  NA              #> 3 RWS_DATA  LOGICAL    class: logical    NA              #> 4 RWS_DATA  ORDERED    ordered: 'y', 'x' NA              #> 5 RWS_DATA  POSIXCT    tz: Etc/GMT+8     NA              #> 6 RWS_DATA  UNITS      units: m          NA              rws_describe_meta(\"rws_data\", \"Units\", \"The site length.\", conn = conn) rws_describe_meta(\"rws_data\", \"POSIXct\", \"Time of the visit\", conn = conn) rws_read_meta(conn) #> # A tibble: 6 × 4 #>   TableMeta ColumnMeta MetaMeta          DescriptionMeta   #>   <chr>     <chr>      <chr>             <chr>             #> 1 RWS_DATA  DATE       class: Date       NA                #> 2 RWS_DATA  FACTOR     factor: 'x', 'y'  NA                #> 3 RWS_DATA  LOGICAL    class: logical    NA                #> 4 RWS_DATA  ORDERED    ordered: 'y', 'x' NA                #> 5 RWS_DATA  POSIXCT    tz: Etc/GMT+8     Time of the visit #> 6 RWS_DATA  UNITS      units: m          The site length.  rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Data Frame of Descriptions to SQL Meta Data Table — rws_describe_meta.data.frame","title":"Add Data Frame of Descriptions to SQL Meta Data Table — rws_describe_meta.data.frame","text":"Add Data Frame Descriptions SQL Meta Data Table","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Data Frame of Descriptions to SQL Meta Data Table — rws_describe_meta.data.frame","text":"","code":"# S3 method for class 'data.frame' rws_describe_meta(x, ..., conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Data Frame of Descriptions to SQL Meta Data Table — rws_describe_meta.data.frame","text":"x data frame columns Table, Column, Description. ... used. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Data Frame of Descriptions to SQL Meta Data Table — rws_describe_meta.data.frame","text":"invisible character vector previous descriptions.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Descriptions to SQL Meta Data Table — rws_describe_meta","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta","text":"Add Descriptions SQL Meta Data Table","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta","text":"","code":"rws_describe_meta(x, ..., conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta","text":"x object specifying descriptions. ... used. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_describe_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Descriptions to SQL Meta Data Table — rws_describe_meta","text":"invisible copy updated meta table.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_disconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Close SQLite Database Connection — rws_disconnect","title":"Close SQLite Database Connection — rws_disconnect","text":"Closes RSQLite::SQLiteConnection SQLite database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_disconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close SQLite Database Connection — rws_disconnect","text":"","code":"rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_disconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close SQLite Database Connection — rws_disconnect","text":"conn RSQLite::SQLiteConnection().","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_disconnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close SQLite Database Connection — rws_disconnect","text":"","code":"conn <- rws_connect() rws_disconnect(conn) print(conn) #> <SQLiteConnection> #>   DISCONNECTED"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_drop_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop SQLite Table — rws_drop_table","title":"Drop SQLite Table — rws_drop_table","text":"Drops SQLite table using DROP TABLE.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_drop_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop SQLite Table — rws_drop_table","text":"","code":"rws_drop_table(table_name, conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_drop_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop SQLite Table — rws_drop_table","text":"table_name string name table. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_drop_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop SQLite Table — rws_drop_table","text":"TRUE","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_drop_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop SQLite Table — rws_drop_table","text":"Also drops rows meta init tables.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_drop_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Drop SQLite Table — rws_drop_table","text":"https://www.sqlite.org/lang_droptable.html","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_drop_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop SQLite Table — rws_drop_table","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"rws_data\" rws_drop_table(\"rws_data\", conn = conn) #> [1] TRUE rws_list_tables(conn) #> character(0) rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_export_gpkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Export all spatial datasets in a database as geopackages. — rws_export_gpkg","title":"Export all spatial datasets in a database as geopackages. — rws_export_gpkg","text":"Export spatial datasets database geopackages.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_export_gpkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export all spatial datasets in a database as geopackages. — rws_export_gpkg","text":"","code":"rws_export_gpkg(conn, dir, overwrite = FALSE)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_export_gpkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export all spatial datasets in a database as geopackages. — rws_export_gpkg","text":"conn RSQLite::SQLiteConnection database. dir string path directory save geopackages . overwrite flag specifying whether overwrite existing geopackages.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_export_gpkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export all spatial datasets in a database as geopackages. — rws_export_gpkg","text":"invisible named vector file names new file names saved.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_export_gpkg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export all spatial datasets in a database as geopackages. — rws_export_gpkg","text":"one spatial column present table, separate geopackage exported , spatial columns dropped.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_list_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Names — rws_list_tables","title":"Table Names — rws_list_tables","text":"Gets table names excluding names meta log tables.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_list_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Names — rws_list_tables","text":"","code":"rws_list_tables(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_list_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Names — rws_list_tables","text":"conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_list_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Names — rws_list_tables","text":"character vector table names.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_list_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Names — rws_list_tables","text":"","code":"conn <- rws_connect() rws_list_tables(conn) #> character(0) rws_write(rws_data, exists = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"rws_data\" rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query SQLite Database — rws_query","title":"Query SQLite Database — rws_query","text":"Gets query SQLite database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query SQLite Database — rws_query","text":"","code":"rws_query(query, meta = TRUE, conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query SQLite Database — rws_query","text":"query string SQLite query. meta flag specifying whether preserve meta data. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query SQLite Database — rws_query","text":"data frame query.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query SQLite Database — rws_query","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_query(\"SELECT date, posixct, factor FROM rws_data\", conn = conn) #> # A tibble: 3 × 3 #>   date       posixct             factor #>   <date>     <dttm>              <fct>  #> 1 2000-01-01 2001-01-02 03:04:05 x      #> 2 2001-02-03 2006-07-08 09:10:11 y      #> 3 NA         NA                  NA     rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.SQLiteConnection.html","id":null,"dir":"Reference","previous_headings":"","what":"Read All Tables from a SQLite Database — rws_read.SQLiteConnection","title":"Read All Tables from a SQLite Database — rws_read.SQLiteConnection","text":"Read Tables SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.SQLiteConnection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read All Tables from a SQLite Database — rws_read.SQLiteConnection","text":"","code":"# S3 method for class 'SQLiteConnection' rws_read(x, meta = TRUE, ...)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.SQLiteConnection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read All Tables from a SQLite Database — rws_read.SQLiteConnection","text":"x RSQLite::SQLiteConnection database. meta flag specifying whether preserve meta data. ... used.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.SQLiteConnection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read All Tables from a SQLite Database — rws_read.SQLiteConnection","text":"named list data frames.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.SQLiteConnection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read All Tables from a SQLite Database — rws_read.SQLiteConnection","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_write(rws_data[c(\"date\", \"ordered\")],   x_name = \"data2\", exists = FALSE, conn = conn ) rws_read(conn) #> $data2 #> # A tibble: 3 × 2 #>   date       ordered #>   <date>     <ord>   #> 1 2000-01-01 x       #> 2 2001-02-03 y       #> 3 NA         NA      #>  #> $rws_data #> # A tibble: 3 × 6 #>   logical date       factor ordered posixct             units #>   <lgl>   <date>     <fct>  <ord>   <dttm>                [m] #> 1 TRUE    2000-01-01 x      x       2001-01-02 03:04:05  10   #> 2 FALSE   2001-02-03 y      y       2006-07-08 09:10:11  11.5 #> 3 NA      NA         NA     NA      NA                   NA   #>  rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Tables from a SQLite Database — rws_read.character","title":"Read Tables from a SQLite Database — rws_read.character","text":"Read Tables SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Tables from a SQLite Database — rws_read.character","text":"","code":"# S3 method for class 'character' rws_read(x, meta = TRUE, conn, ...)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Tables from a SQLite Database — rws_read.character","text":"x character vector table names. meta flag specifying whether preserve meta data. conn RSQLite::SQLiteConnection database. ... used.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Tables from a SQLite Database — rws_read.character","text":"named list data frames.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Tables from a SQLite Database — rws_read.character","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_write(rws_data[c(\"date\", \"ordered\")],   x_name = \"data2\",   exists = FALSE, conn = conn ) rws_read(c(\"rws_data\", \"data2\"), conn = conn) #> $rws_data #> # A tibble: 3 × 6 #>   logical date       factor ordered posixct             units #>   <lgl>   <date>     <fct>  <ord>   <dttm>                [m] #> 1 TRUE    2000-01-01 x      x       2001-01-02 03:04:05  10   #> 2 FALSE   2001-02-03 y      y       2006-07-08 09:10:11  11.5 #> 3 NA      NA         NA     NA      NA                   NA   #>  #> $data2 #> # A tibble: 3 × 2 #>   date       ordered #>   <date>     <ord>   #> 1 2000-01-01 x       #> 2 2001-02-03 y       #> 3 NA         NA      #>  rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read from a SQLite Database — rws_read","title":"Read from a SQLite Database — rws_read","text":"Read SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read from a SQLite Database — rws_read","text":"","code":"rws_read(x, ...)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read from a SQLite Database — rws_read","text":"x object specifying table(s) read. ... used.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read from a SQLite Database — rws_read","text":"named list data frames.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Initialization Data table from a SQLite Database — rws_read_init","title":"Read Initialization Data table from a SQLite Database — rws_read_init","text":"table created exist.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Initialization Data table from a SQLite Database — rws_read_init","text":"","code":"rws_read_init(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Initialization Data table from a SQLite Database — rws_read_init","text":"conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Initialization Data table from a SQLite Database — rws_read_init","text":"data frame init table","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Initialization Data table from a SQLite Database — rws_read_init","text":"","code":"conn <- rws_connect() rws_read_init(conn) #> # A tibble: 0 × 3 #> # ℹ 3 variables: TableInit <chr>, IsInit <int>, SFInit <chr> rws_write(rws_data, exists = FALSE, conn = conn) rws_read_init(conn) #> # A tibble: 1 × 3 #>   TableInit IsInit SFInit #>   <chr>      <int> <chr>  #> 1 RWS_DATA       1 NA     rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Log Data Table from a SQLite Database — rws_read_log","title":"Read Log Data Table from a SQLite Database — rws_read_log","text":"table created exist.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Log Data Table from a SQLite Database — rws_read_log","text":"","code":"rws_read_log(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Log Data Table from a SQLite Database — rws_read_log","text":"conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Log Data Table from a SQLite Database — rws_read_log","text":"data frame log table","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Log Data Table from a SQLite Database — rws_read_log","text":"","code":"conn <- rws_connect() rws_read_log(conn) #> # A tibble: 0 × 5 #> # ℹ 5 variables: DateTimeUTCLog <dttm>, UserLog <chr>, TableLog <chr>, #> #   CommandLog <chr>, NRowLog <int> rws_write(rws_data, exists = FALSE, conn = conn) if (FALSE) { # \\dontrun{ rws_read_log(conn) } # } rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Meta Data table from a SQLite Database — rws_read_meta","title":"Read Meta Data table from a SQLite Database — rws_read_meta","text":"table created exist.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Meta Data table from a SQLite Database — rws_read_meta","text":"","code":"rws_read_meta(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Meta Data table from a SQLite Database — rws_read_meta","text":"conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Meta Data table from a SQLite Database — rws_read_meta","text":"data frame meta table","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Meta Data table from a SQLite Database — rws_read_meta","text":"","code":"conn <- rws_connect() rws_read_meta(conn) #> # A tibble: 0 × 4 #> # ℹ 4 variables: TableMeta <chr>, ColumnMeta <chr>, MetaMeta <chr>, #> #   DescriptionMeta <chr> rws_write(rws_data, exists = FALSE, conn = conn) rws_read_meta(conn) #> # A tibble: 6 × 4 #>   TableMeta ColumnMeta MetaMeta          DescriptionMeta #>   <chr>     <chr>      <chr>             <chr>           #> 1 RWS_DATA  DATE       class: Date       NA              #> 2 RWS_DATA  FACTOR     factor: 'x', 'y'  NA              #> 3 RWS_DATA  LOGICAL    class: logical    NA              #> 4 RWS_DATA  ORDERED    ordered: 'y', 'x' NA              #> 5 RWS_DATA  POSIXCT    tz: Etc/GMT+8     NA              #> 6 RWS_DATA  UNITS      units: m          NA              rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Table from a SQLite Database — rws_read_table","title":"Read a Table from a SQLite Database — rws_read_table","text":"Read Table SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Table from a SQLite Database — rws_read_table","text":"","code":"rws_read_table(x, meta = TRUE, conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Table from a SQLite Database — rws_read_table","text":"x string table name. meta flag specifying whether preserve meta data. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Table from a SQLite Database — rws_read_table","text":"data frame table.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_read_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Table from a SQLite Database — rws_read_table","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_write(rws_data[c(\"date\", \"ordered\")],   x_name = \"data2\", exists = FALSE, conn = conn ) rws_read_table(\"data2\", conn = conn) #> # A tibble: 3 × 2 #>   date       ordered #>   <date>     <ord>   #> 1 2000-01-01 x       #> 2 2001-02-03 y       #> 3 NA         NA      rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename SQLite Column — rws_rename_column","title":"Rename SQLite Column — rws_rename_column","text":"Rename SQLite Column","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename SQLite Column — rws_rename_column","text":"","code":"rws_rename_column(table_name, column_name, new_column_name, conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename SQLite Column — rws_rename_column","text":"table_name string name table. column_name string column name. new_column_name string new name column. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename SQLite Column — rws_rename_column","text":"TRUE","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename SQLite Column — rws_rename_column","text":"","code":"conn <- rws_connect() rws_write(data.frame(x = 1), x_name = \"local\", exists = FALSE, conn = conn) rws_read_table(\"local\", conn = conn) #> # A tibble: 1 × 1 #>       x #>   <dbl> #> 1     1 rws_rename_column(\"local\", \"x\", \"Y\", conn = conn) #> [1] TRUE rws_read_table(\"local\", conn = conn) #> # A tibble: 1 × 1 #>       Y #>   <dbl> #> 1     1 rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename SQLite Table — rws_rename_table","title":"Rename SQLite Table — rws_rename_table","text":"Rename SQLite Table","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename SQLite Table — rws_rename_table","text":"","code":"rws_rename_table(table_name, new_table_name, conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename SQLite Table — rws_rename_table","text":"table_name string name table. new_table_name string new name table. conn RSQLite::SQLiteConnection database.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename SQLite Table — rws_rename_table","text":"TRUE","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_rename_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename SQLite Table — rws_rename_table","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"rws_data\" rws_rename_table(\"rws_data\", \"tableb\", conn) #> [1] TRUE rws_list_tables(conn) #> [1] \"tableb\" rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Data Frame to a SQLite Database — rws_write.data.frame","title":"Write a Data Frame to a SQLite Database — rws_write.data.frame","text":"Write Data Frame SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Data Frame to a SQLite Database — rws_write.data.frame","text":"","code":"# S3 method for class 'data.frame' rws_write(   x,   exists = TRUE,   delete = FALSE,   replace = FALSE,   meta = TRUE,   log = TRUE,   commit = TRUE,   strict = TRUE,   x_name = substitute(x),   silent = getOption(\"rws.silent\", FALSE),   conn,   ... )"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Data Frame to a SQLite Database — rws_write.data.frame","text":"x data frame. exists flag specifying whether table(s) must already exist. delete flag specifying whether delete existing rows inserting data. meta = TRUE meta data deleted. replace flag specifying whether replace existing rows whose inclusion violate unique primary key constraints. meta flag specifying whether preserve meta data. log flag specifying whether log table operations. commit flag specifying whether commit operations (calling commit = FALSE can useful checking data). strict flag specifying whether error x extraneous columns exists = TRUE extraneous data frames. x_name string name object. silent flag specifying whether suppress messages warnings. conn RSQLite::SQLiteConnection database. ... used.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Data Frame to a SQLite Database — rws_write.data.frame","text":"","code":"conn <- rws_connect() rws_list_tables(conn) #> character(0) rws_write(rws_data, exists = FALSE, conn = conn) rws_write(rws_data, x_name = \"moredata\", exists = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"moredata\" \"rws_data\" rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Write the Data Frames in an Environment to a SQLite Database — rws_write.environment","title":"Write the Data Frames in an Environment to a SQLite Database — rws_write.environment","text":"Write Data Frames Environment SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write the Data Frames in an Environment to a SQLite Database — rws_write.environment","text":"","code":"# S3 method for class 'environment' rws_write(   x,   exists = TRUE,   delete = FALSE,   replace = FALSE,   meta = TRUE,   log = TRUE,   commit = TRUE,   strict = TRUE,   x_name = substitute(x),   silent = getOption(\"rws.silent\", FALSE),   conn,   all = TRUE,   unique = TRUE,   ... )"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write the Data Frames in an Environment to a SQLite Database — rws_write.environment","text":"x environment. exists flag specifying whether table(s) must already exist. delete flag specifying whether delete existing rows inserting data. meta = TRUE meta data deleted. replace flag specifying whether replace existing rows whose inclusion violate unique primary key constraints. meta flag specifying whether preserve meta data. log flag specifying whether log table operations. commit flag specifying whether commit operations (calling commit = FALSE can useful checking data). strict flag specifying whether error x extraneous columns exists = TRUE extraneous data frames. x_name string name object. silent flag specifying whether suppress messages warnings. conn RSQLite::SQLiteConnection database. flag specifying whether existing tables data base must represented. unique flag specifying whether table must represented one data frame. ... used.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.environment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write the Data Frames in an Environment to a SQLite Database — rws_write.environment","text":"","code":"conn <- rws_connect() rws_list_tables(conn) #> character(0) atable <- readwritesqlite::rws_data another_table <- readwritesqlite::rws_data not_atable <- 1L rws_write(environment(), exists = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"another_table\" \"atable\"        rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write to a SQLite Database — rws_write","title":"Write to a SQLite Database — rws_write","text":"Write SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write to a SQLite Database — rws_write","text":"","code":"rws_write(   x,   exists = TRUE,   delete = FALSE,   replace = FALSE,   meta = TRUE,   log = TRUE,   commit = TRUE,   strict = TRUE,   x_name = substitute(x),   silent = getOption(\"rws.silent\", FALSE),   conn,   ... )"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write to a SQLite Database — rws_write","text":"x object write. exists flag specifying whether table(s) must already exist. delete flag specifying whether delete existing rows inserting data. meta = TRUE meta data deleted. replace flag specifying whether replace existing rows whose inclusion violate unique primary key constraints. meta flag specifying whether preserve meta data. log flag specifying whether log table operations. commit flag specifying whether commit operations (calling commit = FALSE can useful checking data). strict flag specifying whether error x extraneous columns exists = TRUE extraneous data frames. x_name string name object. silent flag specifying whether suppress messages warnings. conn RSQLite::SQLiteConnection database. ... used.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write to a SQLite Database — rws_write","text":"invisible character vector name(s) table(s).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write to a SQLite Database — rws_write","text":"","code":"conn <- rws_connect() rws_write(rws_data, exists = FALSE, conn = conn) rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Named List of Data Frames to a SQLite Database — rws_write.list","title":"Write a Named List of Data Frames to a SQLite Database — rws_write.list","text":"Write Named List Data Frames SQLite Database","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Named List of Data Frames to a SQLite Database — rws_write.list","text":"","code":"# S3 method for class 'list' rws_write(   x,   exists = TRUE,   delete = FALSE,   replace = FALSE,   meta = TRUE,   log = TRUE,   commit = TRUE,   strict = TRUE,   x_name = substitute(x),   silent = getOption(\"rws.silent\", FALSE),   conn,   all = TRUE,   unique = TRUE,   ... )"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Named List of Data Frames to a SQLite Database — rws_write.list","text":"x named list data frames. exists flag specifying whether table(s) must already exist. delete flag specifying whether delete existing rows inserting data. meta = TRUE meta data deleted. replace flag specifying whether replace existing rows whose inclusion violate unique primary key constraints. meta flag specifying whether preserve meta data. log flag specifying whether log table operations. commit flag specifying whether commit operations (calling commit = FALSE can useful checking data). strict flag specifying whether error x extraneous columns exists = TRUE extraneous data frames. x_name string name object. silent flag specifying whether suppress messages warnings. conn RSQLite::SQLiteConnection database. flag specifying whether existing tables data base must represented. unique flag specifying whether table must represented one data frame. ... used.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/rws_write.list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Named List of Data Frames to a SQLite Database — rws_write.list","text":"","code":"conn <- rws_connect() rws_list_tables(conn) #> character(0) rws_write(list(somedata = rws_data, anothertable = rws_data), exists = FALSE, conn = conn) rws_list_tables(conn) #> [1] \"anothertable\" \"somedata\"     rws_disconnect(conn)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/vld_sqlite_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SQLite Connection — vld_sqlite_conn","title":"Validate SQLite Connection — vld_sqlite_conn","text":"Validate SQLite Connection","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/vld_sqlite_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SQLite Connection — vld_sqlite_conn","text":"","code":"vld_sqlite_conn(x, connected = NA)"},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/vld_sqlite_conn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SQLite Connection — vld_sqlite_conn","text":"x object check. connected logical scalar specifying whether x connected.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/vld_sqlite_conn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SQLite Connection — vld_sqlite_conn","text":"flag indicating whether object validated.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/reference/vld_sqlite_conn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate SQLite Connection — vld_sqlite_conn","text":"","code":"conn <- rws_connect() vld_sqlite_conn(conn) #> [1] TRUE rws_disconnect(conn) vld_sqlite_conn(conn, connected = TRUE) #> [1] FALSE"},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"continuous-integration-0-2-0-9005","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"readwritesqlite 0.2.0.9005","text":"Fetch tags fledge workflow avoid unnecessary NEWS entries (#45).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"continuous-integration-0-2-0-9004","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"readwritesqlite 0.2.0.9004","text":"Use larger retry count lock-threads workflow (#44).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"continuous-integration-0-2-0-9003","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"readwritesqlite 0.2.0.9003","text":"Ignore errors removing pkg-config macOS (#43).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"continuous-integration-0-2-0-9002","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"readwritesqlite 0.2.0.9002","text":"Overwrite actions-sync (#42).","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-0209001","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.2.0.9001","title":"readwritesqlite 0.2.0.9001","text":"Internal changes.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-0209000","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.2.0.9000","title":"readwritesqlite 0.2.0.9000","text":"previous version.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-020","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.2.0","title":"readwritesqlite 0.2.0","text":"CRAN release: 2022-10-16 Added rws_export_gpkg(). Now R >= 4.0 Switched testthat 3. Previously soft deprecated functions now warn unconditionally.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-012","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.1.2","title":"readwritesqlite 0.1.2","text":"CRAN release: 2020-07-13","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"new-features-0-1-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"readwritesqlite 0.1.2","text":"Extended also work pool objects.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"deprecated-0-1-2","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"readwritesqlite 0.1.2","text":"Removed geometry sfc column rws_data.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"internal-0-1-2","dir":"Changelog","previous_headings":"","what":"Internal","title":"readwritesqlite 0.1.2","text":"Removed trailing spaces sf (>= 0.9-1) projections causing write error.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-011","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.1.1","title":"readwritesqlite 0.1.1","text":"CRAN release: 2020-04-07 Fix failing CRAN tests sf (>= 0.9-1)","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-010","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.1.0","title":"readwritesqlite 0.1.0","text":"CRAN release: 2020-01-29","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"readwritesqlite 0.1.0","text":"Added rws_drop_table(). Added rws_rename_table() rws_rename_column(). Updated error messages tidyverse style.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"deprecated-functions-0-1-0","dir":"Changelog","previous_headings":"","what":"Deprecated Functions","title":"readwritesqlite 0.1.0","text":"Deprecated check_sqlite_connection() chk_sqlite_conn().","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"dependencies-0-1-0","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"readwritesqlite 0.1.0","text":"Moved sf units packages Suggests. Replaced dependency err checkr chk.","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-002","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.0.2","title":"readwritesqlite 0.0.2","text":"CRAN release: 2019-07-23 Replace hms::.hms hms::is_hms Replace hms::.hms hms::as_hms Fix tests release RSQLite 2.1.1.9003","code":""},{"path":"https://poissonconsulting.github.io/readwritesqlite/news/index.html","id":"readwritesqlite-001","dir":"Changelog","previous_headings":"","what":"readwritesqlite 0.0.1","title":"readwritesqlite 0.0.1","text":"CRAN release: 2019-07-11 Initial release","code":""}]
